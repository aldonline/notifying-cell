// Generated by CoffeeScript 1.6.3
(function() {
  var ReadOnlyError, TooManyArgumentsError, cell, rc, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  rc = require('reactive-commons');

  ReadOnlyError = (function(_super) {
    __extends(ReadOnlyError, _super);

    function ReadOnlyError() {
      _ref = ReadOnlyError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return ReadOnlyError;

  })(Error);

  TooManyArgumentsError = (function(_super) {
    __extends(TooManyArgumentsError, _super);

    function TooManyArgumentsError() {
      _ref1 = TooManyArgumentsError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return TooManyArgumentsError;

  })(Error);

  module.exports = cell = function() {
    var f, invalidators, value;
    value = void 0;
    invalidators = void 0;
    f = function(new_value) {
      var a, cb, invalidators_, _i, _len;
      a = arguments;
      if (a.length === 0) {
        if (rc.active()) {
          (invalidators != null ? invalidators : invalidators = []).push(rc.invalidator());
        }
        if (value instanceof Error) {
          throw value;
        } else {
          return value;
        }
      } else if (a.length === 1) {
        new_value = a[0];
        if (value !== new_value) {
          value = new_value;
          if ((invalidators_ = invalidators) != null) {
            invalidators = void 0;
            for (_i = 0, _len = invalidators_.length; _i < _len; _i++) {
              cb = invalidators_[_i];
              cb();
            }
          }
        }
        return void 0;
      } else {
        throw new TooManyArgumentsError;
      }
    };
    f.view = function() {
      return function() {
        if (arguments.length > 0) {
          throw new ReadOnlyError;
        }
        return f();
      };
    };
    return f;
  };

  cell.ReadOnlyError = ReadOnlyError;

  cell.TooManyArgumentsError = TooManyArgumentsError;

}).call(this);
